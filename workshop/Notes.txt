Schedule
	15 minutes for setup, pulling down repo, etc.

	15 minutes [See Below] crasftsmanship slides and our introductions
		Hussein starts
		Both do introductions
		Brian does poll and disclaimer
		Brian the crasftsmandship slides
		Brian does reads out the exercise slide, and kicks off the exercise

	30 minutes [Both] craftsmanship exercises

	15 minutes [Hussein] architecture slides
		Hussein does reads out the exercise slide, and kicks off the exercise
	30 minutes [Both] architecture exercise
	15 minutes [Hussein] Testing slides
		Hussein does reads out the exercise slide, and kicks off the exercise and take break
	15 minutes Break
	30 minute [Both] Testing exercise
	15 minutes [Brian] Refactoring and Reusibility slides
		Brian does reads out the exercise slide, and kicks off the exercise
	30 minutes [Both] Refactoring and Reusibility exercises

	30 minutes [Brian, questions for Both] Closing, QA

Signal for injection: hand signal, so look at them for it
Sit down when your section is done
Read out the exercise slide, so they know what they are doing


Intro
		

Quality/Craftsmanship
	Emphasis the kinds of questions you should ask
	-ilities

	Have an exercise where we come up with business requirements to come up with the best quality system

	List the things you should be thinking about

	Idenitfying risks and how to mitigate them

	Want them to have this mindset before coding (some sort of plan)

	Have a list of questions (possibly the -ilities)?

	Emphasis on doing things with intent and knowing why you are doing the things you are doing

	Drive home the point of "attention to detail"

	You should have a reason

	Every brush stroke an artist makes has a purpose

	Emphasis on working not equal right

	Will be built into every exercise

	Move the purist vs. pragmatist into development is more art than science

	exercises will be cenetered around these concepts

Architecture
	Everything should have its own place, and that place should be well known and/or easily discovered

	Creating software is easy and you've probably been overthinking it

	The "New Way of Thinking"

	Everything is hard before its easy

	Complex vs. Complicated
		exercise on some code examples to denote rather they are complex or complicated????
	
	Proper application structure (n-Tier Architecture)
		Mention the problems that arise if you don't have good architecture

	Use analogy of kitchen and "mise en place"

	exercises will be cenetered around these concepts

	Change the LEGO visuals to be more granular, since the services should sub-assemblies, but the LEGO's should be invidual pieces of code
		analogous to electric circuits, where you learn the little piece, then how it becomes part of bigger part
		Recipes could be another analogy, such as strusel on top of my muffins

Testing
	The What?
		What makes code testable?
		Test projects
		What are unit tests?
			Single Method Unit Tests
			End-to-End/Orchestration Unit Tests
		What are integration tests?
			Database Integration Tests
			Service Integration Tests

	The Why?
		Quality is eveyone's responsibility
		We can't rely solely on QA's there are things they can't test
		Unit and Integration Tests are the most important pieces of the testing pyramid
		Needed to be able to do things like refactoring
		Great for libraries where we want to reuse the code and we need assurance that it is correct and works as intented

	The How?
		TDD vs. TED
		Mocking vs. Faking (see if we can manage to not needing mocking, maybe a touch of faking, but keep it very simple)
		We can mention that there are advanced things like Mocking using things like Moq


Refactoring
	The What?
		restructuring and cleaning up your code

	The most important thing leaving code in a "good/clean" state
		Move the what is right? content into here

	The less code you write the less chance for bugs

	Benefits of leaving in a good state
		easily adapt to chaning business requirements

	Move the working doesn't equal right from crasftmanship to here

	Analogy of cleaning your house




Mention the benefits of proper coding (eliminate death marches, ability to handle changing business requirements)

Maybe have a glossary of terms and our definitions of them for things such as purist/pragrmatist, and TDD/TED, where we want to mention them, but they would either make the sections too dense or distract from the main exercises
	purist/pragrmatist
	TDD/TED


Tasks are in presenter notes on the slides

Get ride of the agility Slide
	rework into other sections, just mention that "agile" means moving quickly and easily, not a framework

Move relevant pieces from the Industry Best Practices and Pro Tips into other sections and mention them in passing


exercise -
	self-administered
	problem statement
	guidance
	expected outcomes
	expected solution
	consistent in how people arrive at the possilbe solution
	has to be solveable
	15 minute time frame to do less and 10 minute review time
		come up with a pre-defined list of questions we can ask
	maybe in later exercises if the is a lot of deviation, then ask people to present their solution


we can expect people to have Visual Studio installed

2 Lesson PDF's
	1 for the exercise
	1 for the solution and remarks

	use the same format at Little Rock, just separate out




Chrome
C:\Users\korzy\Desktop\Leather
C:\Users\korzy\OneDrive\Engraving\Leatherwork\Patterns & Templates\Codemash Messenger Bag Acrylic Template
C:\Code\Talks\SoftwareDoneProperly\workshop
C:\Users\korzy\OneDrive\Engraving\Leatherwork\Patterns & Templates\Tony Allen Bernier Practice Tooling
C:\Users\korzy\OneDrive\Engraving\Leatherwork\Patterns & Templates\Leather Belt Keychain Clip
C:\Users\korzy\OneDrive\Engraving\Leatherwork\Patterns & Templates\Welted Business Card Case
C:\Users\korzy\OneDrive\Engraving\Leatherwork
CSharp.TestEmail.linq
WeekDateCounter.linq
C:\Code\Talks\SoftwareDoneProperly-MiddleManagement\MiddleManagement\linqpad\CleanupFilesBeforeZip.linq

Christmas 2022
Leather Projects
Saxenda 
Will Tent Analysis
DDR Parts
